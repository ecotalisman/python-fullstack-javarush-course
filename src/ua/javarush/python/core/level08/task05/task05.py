# Generator

# Write a program that creates a counter generator function using closures.
# The program should:
# Define an outer function make_counter() that creates and returns an inner function counter().
# The inner function counter() should increment the counter value and return it.
# Create several independent counters and call them multiple times, printing the result.

### üá∫üá¶ Ukrainian version:

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä.

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —Ñ—É–Ω–∫—Ü—ñ—é-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∑–∞–º–∏–∫–∞–Ω—å.
# –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞:
# –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é make_counter(), —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é counter().
# –í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è counter() –ø–æ–≤–∏–Ω–Ω–∞ –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –π–æ–≥–æ.
# –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—Ö –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤, –≤–∏–≤–æ–¥—è—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –µ–∫—Ä–∞–Ω.

# Write your code here
def make_counter():
    count = 0

    def counter():
        nonlocal count
        count += 1
        return count

    return counter

counter = make_counter()
print(counter())
print(counter())
print(counter())

other_counter = make_counter()
print(other_counter())
print(other_counter())
print(other_counter())

