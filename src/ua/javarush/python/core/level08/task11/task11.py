# Multiple Decorators

# Write a program that uses multiple decorators for one function.
# The program should:
# Define two decorators decorator1 and decorator2 that log their calls.
# Apply both decorators to the say_hello function.
# Call the say_hello function.

### üá∫üá¶ Ukrainian version:

# –ú–Ω–æ–∂–∏–Ω–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫—ñ–ª—å–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –æ–¥–Ω—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.
# –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞:
# –í–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–≤–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ decorator1 —ñ decorator2, —è–∫—ñ –ª–æ–≥—É—é—Ç—å —Å–≤–æ—ó –≤–∏–∫–ª–∏–∫–∏.
# –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –æ–±–∏–¥–≤–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó say_hello.
# –í–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é say_hello.

# Write your code here
def decorator1(func):
    def wrapper():
        print("Decorator-1")
        func()

    return wrapper

def decorator2(func):
    def wrapper():
        print("Decorator-2")
        func()

    return wrapper

@decorator1
@decorator2
def say_hello():
    print("Hello!")

say_hello()