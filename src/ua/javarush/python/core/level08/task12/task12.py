# Execution Time

# Write a program that creates a decorator to measure the execution time of a function.
# The program should:
# Define a decorator time_decorator that measures and prints the execution time of a function.
# Apply the decorator to the function compute_square(n), which computes the square of a number and simulates a delay using time.sleep().
# Call the function compute_square(n).

### üá∫üá¶ Ukrainian version:

# –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏.

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
# –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞:
# –í–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä time_decorator, —è–∫–∏–π –≤–∏–º—ñ—Ä—é—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó.
# –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó compute_square(n), —è–∫–∞ –æ–±—á–∏—Å–ª—é—î –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ —Ç–∞ —ñ–º—ñ—Ç—É—î –∑–∞—Ç—Ä–∏–º–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é time.sleep().
# –í–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é compute_square(n).

# Write your code here
import time

def time_decorator(func):
    def wrapper(*args, **kwargs):
        t1 = time.time()
        result = func(*args, **kwargs)
        t2 = time.time()
        print(f"The function {func.__name__} completed in {(t2 - t1):.5f}s")
        return result

    return wrapper

@time_decorator
def compute_square(n):
    time.sleep(1)
    return n ** 2

compute_square(5)
