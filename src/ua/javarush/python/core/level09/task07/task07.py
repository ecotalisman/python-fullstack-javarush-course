# Vehicles

# Create a base class Vehicle that has an attribute brand.
# Then create two child classes Car and Motorcycle that inherit from Vehicle
# and add their own unique attributes and methods.
# For example, the Car class may have a method drive, and the Motorcycle class may have a method ride.

### üá∫üá¶ Ukrainian version:

# –ú–∞—à–∏–Ω–∏.

# –°—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Vehicle, —è–∫–∏–π –±—É–¥–µ –º–∞—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç brand.
# –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–≤–∞ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å–∏ Car —ñ Motorcycle, —è–∫—ñ –±—É–¥—É—Ç—å –Ω–∞—Å–ª—ñ–¥—É–≤–∞—Ç–∏ –≤—ñ–¥ Vehicle
# —Ç–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–≤–æ—ó —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ —Ç–∞ –º–µ—Ç–æ–¥–∏.
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–ª–∞—Å Car –º–æ–∂–µ –º–∞—Ç–∏ –º–µ—Ç–æ–¥ drive, –∞ –∫–ª–∞—Å Motorcycle ‚Äî –º–µ—Ç–æ–¥ ride.

# Write your code here

class Vehicle:
    def __init__(self, brand):
        self.brand = brand

# Write your code here
class Car(Vehicle):
    def __init__(self, brand, model):
        super().__init__(brand)
        self.model = model

    def drive(self):
        return f"{self.brand} {self.model} is driving"


class Motorcycle(Vehicle):
    def __init__(self, brand, model):
        super().__init__(brand)
        self.model = model

    def ride(self):
        return f"{self.brand} {self.model} is riding"


# Examples of using the classes:
car = Car("Toyota", "Corolla")
print(car.drive())  # Output: Toyota Corolla is driving.

motorcycle = Motorcycle("Yamaha", "R1")
print(motorcycle.ride())  # Output: Yamaha R1 is riding.