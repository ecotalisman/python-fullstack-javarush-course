# Polymorphism

# Create a base class Shape with a method area that returns the area of the shape.
# Then create child classes Circle and Rectangle that override the area method
# to calculate the area of their respective shapes.
# Use polymorphism to create a list of shapes and calculate their areas.

### üá∫üá¶ Ukrainian version:

# –ü–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º.

# –°—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Shape –∑ –º–µ—Ç–æ–¥–æ–º area, —è–∫–∏–π –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –ø–ª–æ—â—É —Ñ—ñ–≥—É—Ä–∏.
# –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏ Circle —Ç–∞ Rectangle, —è–∫—ñ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—Ç–∏ –º–µ—Ç–æ–¥ area –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–ª–æ—â—ñ —Å–≤–æ—ó—Ö —Ñ—ñ–≥—É—Ä.
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–≥—É—Ä —Ç–∞ –æ–±—á–∏—Å–ª–∏—Ç–∏ —ó—Ö –ø–ª–æ—â—ñ.

# Write your code here

import math

class Shape:
    def area(self):
        raise NotImplementedError("Subclasses should implement this method!")


# Write your code here
class Circle(Shape):
    def __init__(self, r):
        self.r = r

    def area(self):
        return math.pi * self.r ** 2

class Rectangle(Shape):
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def area(self):
        return self.a * self.b


shapes = [Circle(5), Rectangle(4, 6), Circle(3)]
areas = [shape.area() for shape in shapes]

for area in areas:
    print(area)