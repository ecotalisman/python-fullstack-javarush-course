# Animal World

# Create a base class Animal with a method make_sound that returns the string "Uuuuuu!".
# Then create child classes Dog and Cat that override the make_sound method
# and use super() to call the parent class method.

### üá∫üá¶ Ukrainian version:

# –¢–≤–∞—Ä–∏–Ω–Ω–∏–π —Å–≤—ñ—Ç.

# –°—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Animal –∑ –º–µ—Ç–æ–¥–æ–º make_sound, —è–∫–∏–π –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä—è–¥–æ–∫ "–£—É—É—É—É—É—É!".
# –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏ Dog —Ç–∞ Cat, —è–∫—ñ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—Ç–∏ –º–µ—Ç–æ–¥ make_sound
# —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ super() –¥–ª—è –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É.

# Write your code here
class Animal:
    def make_sound(self):
        return "–£—É—É—É—É—É—É!"

class Dog(Animal):
    def make_sound(self):
        sound_dog = super().make_sound() + " –ì–∞–≤-–≥–∞–≤!"
        return sound_dog

class Cat(Animal):
    def make_sound(self):
        sound_cat = super().make_sound() + " –ú—è—É-–º—è—É!"
        return sound_cat


# Examples of usage:

dog = Dog()
cat = Cat()

print(dog.make_sound())  # –£—É—É—É—É—É—É! –ì–∞–≤-–≥–∞–≤!
print(cat.make_sound())  # –£—É—É—É—É—É—É! –ú—è—É-–º—è—É!