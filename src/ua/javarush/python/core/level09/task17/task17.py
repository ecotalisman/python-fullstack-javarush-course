# Using super() and MRO

# Create classes A, B, C, and D, where B and C inherit from A, and D inherits from B and C.
# In each class, define a method method that prints the class name and calls super().method().
# Create an instance of class D and call the method method to understand the method resolution order (MRO).

### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è super() —ñ MRO

# –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏ A, B, C, —ñ D, –¥–µ B —ñ C —É—Å–ø–∞–¥–∫–æ–≤—É—é—Ç—å –≤—ñ–¥ A, –∞ D —É—Å–ø–∞–¥–∫–æ–≤—É—î –≤—ñ–¥ B —ñ C.
# –£ –∫–æ–∂–Ω–æ–º—É –∫–ª–∞—Å—ñ –≤–∏–∑–Ω–∞—á—Ç–µ –º–µ—Ç–æ–¥ method, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —ñ–º'—è –∫–ª–∞—Å—É —ñ –≤–∏–∫–ª–∏–∫–∞—î –º–µ—Ç–æ–¥ super().method().
# –°—Ç–≤–æ—Ä—ñ—Ç—å –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É D —ñ –≤–∏–∫–ª–∏—á—Ç–µ –º–µ—Ç–æ–¥ method, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤ –∑–∞ MRO.

# Write your code here
class A:
    def method(self):
        print("A")
        
class B (A):
    def method(self):
        print("B")
        super().method()


class C(A):
    def method(self):
        print("C")
        super().method()
        
class D(B, C):
    def method(self):
        print("D")
        super().method()

obj = D()
obj.method()


