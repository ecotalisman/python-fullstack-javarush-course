# Operator Overloading for Indexing

# Write a class Matrix that represents a two-dimensional matrix
# and supports operator overloading for indexing ([]).
# Implement the __getitem__ and __setitem__ methods.

### üá∫üá¶ Ukrainian version:

# –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó

# –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Matrix, —è–∫–∏–π –±—É–¥–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç–∏ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω—É –º–∞—Ç—Ä–∏—Ü—é —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó ([]).
# –†–µ–∞–ª—ñ–∑—É–π—Ç–µ –º–µ—Ç–æ–¥–∏ __getitem__ —Ç–∞ __setitem__.


class Matrix:

# Write your code here
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.data = [[0 for _ in range(cols)] for _ in range(rows)]

    def __getitem__(self, key):
        row, col = key
        if not (0 <= row < self.rows and 0 <= col < self.cols):
            raise IndexError("Index out of range")
        return self.data[row][col]

    def __setitem__(self, key, value):
        row, col = key
        if not (0 <= row < self.rows and 0 <= col < self.cols):
            raise IndexError("Index out of range")
        self.data[row][col] = value

# Example usage:
matrix = Matrix(3, 3)
matrix[0, 0] = 1
print(matrix[0, 0])  # –í–∏–≤—ñ–¥: 1
