# Using the reduce() Method

# Write a class that controls its own serialization via the __reduce__() method
# so that only certain fields are preserved during serialization and deserialization.


### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É reduce()

# –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å, —è–∫–∏–π –∫–µ—Ä—É—î —Å–≤–æ—î—é —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É __reduce__(),
# —â–æ–± –ø—ñ–¥ —á–∞—Å —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–±–µ—Ä—ñ–≥–∞–ª–∏—Å—è –ª–∏—à–µ –ø–µ–≤–Ω—ñ –ø–æ–ª—è.

# Write your code here
import pickle

class CustomClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __reduce__(self):
        return self.__class__, (self.name, self.age)

    def __repr__(self):
        return f"CustomClass(name={self.name}, age={self.age})"

obj = CustomClass("John", 25)

data = pickle.dumps(obj)
new = pickle.loads(data)
print(new)
