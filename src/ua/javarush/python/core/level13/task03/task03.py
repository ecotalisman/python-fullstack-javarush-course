# Using an Encoder

# Write a program that serializes a Python object containing date and time into a JSON string
# using a custom encoder to convert datetime objects into ISO string format.

# Write your code here

### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–Ω–∫–æ–¥–µ—Ä–∞

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î –æ–±'—î–∫—Ç Python, —â–æ –º—ñ—Å—Ç–∏—Ç—å –¥–∞—Ç—É —ñ —á–∞—Å, —É JSON-—Ä—è–¥–æ–∫
# –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –∫–æ–¥–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ datetime —É —Ä—è–¥–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç ISO.

# –ù–∞–ø–∏—à—ñ—Ç—å —Ç—É—Ç –≤–∞—à –∫–æ–¥
import json
from datetime import datetime, timezone


class CustomEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, datetime):
            return o.isoformat()
        return super().default(o)


data = {
    "event": "Start",
    "timestamp": datetime(2020, 1, 1, 12, 0, tzinfo=timezone.utc)
}

json_str = json.dumps(data, cls=CustomEncoder, ensure_ascii=False, indent=4)
print(json_str)
