# Using a Decoder

# Write a program that deserializes a JSON string into a Python object
# using a custom decoder to convert ISO strings into datetime objects.

# Write your code here

### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–∫–æ–¥–µ—Ä–∞

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î JSON-—Ä—è–¥–æ–∫ –≤ –æ–±'—î–∫—Ç Python –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
# –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –¥–µ–∫–æ–¥–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ ISO –≤ –æ–±'—î–∫—Ç–∏ datetime.

# –ù–∞–ø–∏—à—ñ—Ç—å —Ç—É—Ç –≤–∞—à –∫–æ–¥
import json
from datetime import datetime


def custom_decoder(dct):
    if 'timestamp' in dct:
        dct['timestamp'] = datetime.fromisoformat(dct['timestamp'])
    return dct


json_str = '''
{
    "event": "Start",
    "timestamp": "2020-01-01T12:00:00+00:00"
}
'''

data = json.loads(json_str, object_hook=custom_decoder)
print(data)
