# Performing a POST Request using http.client

# Write a program that performs a POST request to a server with data
# and prints the response. The program should handle possible errors.


### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è POST-–∑–∞–ø–∏—Ç—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º http.client

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î POST-–∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑ –ø–µ—Ä–µ–¥–∞—á–µ—é –¥–∞–Ω–∏—Ö —ñ –≤–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
# –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏.

# Write your code here
import http.client
import json

payload = json.dumps({
    "userId": 1,
    "title": "Learn Python POST request",
    "completed": False
})

headers = {
    "Content-Type": "application/json"
}

try:
    conn = http.client.HTTPSConnection("jsonplaceholder.typicode.com")
    conn.request("POST", "/todos", body=payload, headers=headers)
    response = conn.getresponse()
    print(response.status, response.reason)

    data = response.read().decode("utf-8")
    print(data)

except http.client.HTTPConnection as err:
    print(f"HTTPS error occurred: {err}")
except Exception as err:
    print(f"An error occurred: {err}")
finally:
    conn.close()
