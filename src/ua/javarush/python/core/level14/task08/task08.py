# Using Future

# Write an asynchronous function that takes a Future object
# and sets its result after a 1-second delay.
# Create an event loop, a Future object, and use the function to set the result.
# Then print the Future result on the screen.

### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Future

# –ù–∞–ø–∏—à—ñ—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç Future
# —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–ª—è –Ω—å–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏ —É 1 —Å–µ–∫—É–Ω–¥—É.
# –°—Ç–≤–æ—Ä—ñ—Ç—å —Ü–∏–∫–ª –ø–æ–¥—ñ–π, –æ–±'—î–∫—Ç Future —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
# –ü–æ—Ç—ñ–º –≤–∏–≤–µ–¥—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç Future –Ω–∞ –µ–∫—Ä–∞–Ω.

# Write your code here
import asyncio

async def set_future(fut: asyncio.Future, value):
    await asyncio.sleep(1)
    fut.set_result(value)

async def main():
    loop = asyncio.get_running_loop()
    fut = loop.create_future()
    await set_future(fut, "Hello bro")
    print(fut.result())

asyncio.run(main())
