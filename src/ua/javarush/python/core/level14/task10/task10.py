# Starting and Stopping the Event Loop

# Write a program that runs the event loop in infinite mode.
# Schedule stopping the loop after 3 seconds using the call_later method.
# Print the state of whether the loop is running before and after calling the stop() method.

### üá∫üá¶ Ukrainian version:

# –ó–∞–ø—É—Å–∫ —ñ –∑—É–ø–∏–Ω–∫–∞ —Ü–∏–∫–ª—É –ø–æ–¥—ñ–π

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î —Ü–∏–∫–ª –ø–æ–¥—ñ–π —É –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.
# –ó–∞–ø–ª–∞–Ω—É–π—Ç–µ –∑—É–ø–∏–Ω–∫—É —Ü–∏–∫–ª—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ call_later.
# –í–∏–≤–µ–¥—ñ—Ç—å —Å—Ç–∞–Ω, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Ü–∏–∫–ª, –¥–æ —ñ –ø—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—É stop().

# Write your code here
import asyncio
from asyncio import AbstractEventLoop

def my_callback(loop: AbstractEventLoop):
    print("Callback executed after delay")
    loop.stop()

loop = asyncio.new_event_loop()
loop.call_later(3, my_callback, loop)

print("Loop running?", loop.is_running())
loop.run_forever()
print("Loop running?", loop.is_running())
