# Managing the Event Loop

# Write an asynchronous program that creates two tasks.
# The first task should print "First task" and wait for 2 seconds,
# the second task should print "Second task" and wait for 3 seconds.
# Use asyncio.create_task() to create the tasks and run them in parallel, waiting for both to finish.

### üá∫üá¶ Ukrainian version:

# –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–∏–∫–ª–æ–º –ø–æ–¥—ñ–π

# –ù–∞–ø–∏—à—ñ—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –¥–≤—ñ –∑–∞–¥–∞—á—ñ.
# –ü–µ—Ä—à–∞ –∑–∞–¥–∞—á–∞ –º–∞—î –¥—Ä—É–∫—É–≤–∞—Ç–∏ "–ü–µ—Ä—à–∞ –∑–∞–¥–∞—á–∞" —ñ —á–µ–∫–∞—Ç–∏ 2 —Å–µ–∫—É–Ω–¥–∏,
# –¥—Ä—É–≥–∞ –∑–∞–¥–∞—á–∞ –º–∞—î –¥—Ä—É–∫—É–≤–∞—Ç–∏ "–î—Ä—É–≥–∞ –∑–∞–¥–∞—á–∞" —ñ —á–µ–∫–∞—Ç–∏ 3 —Å–µ–∫—É–Ω–¥–∏.
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ asyncio.create_task() –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á —Ç–∞ –≤–∏–∫–æ–Ω—É–π—Ç–µ —ó—Ö –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ, –¥–æ—á–µ–∫–∞–≤—à–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±–æ—Ö.

# Write your code here
import asyncio

async def worker(msg, delay):
    print(msg)
    await asyncio.sleep(delay)

async def main():
    t1 = asyncio.create_task(worker("–ü–µ—Ä—à–∞ –∑–∞–¥–∞—á–∞", 2))
    t2 = asyncio.create_task(worker("–î—Ä—É–≥–∞ –∑–∞–¥–∞—á–∞", 3))
    await asyncio.gather(t1, t2)


asyncio.run(main())
