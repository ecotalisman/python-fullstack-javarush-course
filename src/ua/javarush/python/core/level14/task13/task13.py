# Using a Future object

# Write a program that creates a Future object and sets its result after 3 seconds.
# Use the set_result method to set the result and print the Future's result after it completes.

### üá∫üá¶ Ukrainian version:

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ Future

# –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç Future —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–ª—è –Ω—å–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏.
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –º–µ—Ç–æ–¥ set_result –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —ñ –≤–∏–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±'—î–∫—Ç–∞ Future –ø—ñ—Å–ª—è –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.

# Write your code here
import asyncio
from asyncio import Future

async def set_fut_result(fut: Future, delay):
    await asyncio.sleep(delay)
    fut.set_result("Result is ready Future")

async def main():
    loop = asyncio.get_running_loop()
    fut = loop.create_future()
    asyncio.create_task(set_fut_result(fut, 3))
    result = await fut
    print(result)

asyncio.run(main())
