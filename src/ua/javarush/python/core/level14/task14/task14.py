# Handling Future Exceptions

# Write a program that creates a Future object and sets an exception for it after 2 seconds.
# Use the set_exception method to set the exception and handle this exception once it occurs.

### üá∫üá¶ Ukrainian version:

# –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–ª—é—á–µ–Ω—å Future

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç Future —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–ª—è –Ω—å–æ–≥–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏.
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ—Ç–æ–¥ set_exception –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è —ñ –æ–±—Ä–æ–±—ñ—Ç—å —Ü–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –π–æ–≥–æ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è.

# Write your code here
import asyncio
from asyncio import Future

async def set_fut_except(fut: Future, delay):
    await asyncio.sleep(delay)
    fut.set_exception(ValueError("There was an error"))

async def main():
    loop = asyncio.get_running_loop()
    fut = loop.create_future()
    asyncio.create_task(set_fut_except(fut, 2))
    try:
        result = await fut
    except ValueError as e:
        print(f"Error: {e}")
    else:
        print(f"Success: {result}")

asyncio.run(main())
