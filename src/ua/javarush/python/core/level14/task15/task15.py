# Asynchronous Context Manager

# Write an asynchronous context manager that prints a message upon entering and exiting the context.
# Inside the context, perform an asynchronous delay of 2 seconds and print the message "Inside the context".

### üá∫üá¶ Ukrainian version:

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä

# –ù–∞–ø–∏—à—ñ—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä, —è–∫–∏–π –±—É–¥–µ –¥—Ä—É–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ —Ç–∞ –≤–∏—Ö–æ–¥—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
# –í—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –Ω–∞ 2 —Å–µ–∫—É–Ω–¥–∏ —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–í—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É".

# Write your code here
import asyncio

class AsyncContextManager:
    async def __aenter__(self):
        print("Enter context")
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        print("Exit context")


async def main():
    async with AsyncContextManager():
        await asyncio.sleep(2)
        print("–í—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")

asyncio.run(main())
