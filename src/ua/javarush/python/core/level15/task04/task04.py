# Doubly Linked List

# Write a program that implements a doubly linked list with methods for adding, deleting, and searching elements.
# Add several elements to the list, delete one of them, and search for an element by its value.

### üá∫üá¶ Ukrainian version:

# –î–≤–æ–∑–≤'—è–∑–Ω–∏–π —Å–ø–∏—Å–æ–∫

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Ä–µ–∞–ª—ñ–∑—É—î –¥–≤–æ–∑–≤'—è–∑–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑ –º–µ—Ç–æ–¥–∞–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ—à—É–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
# –î–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Å–ø–∏—Å–æ–∫, –≤–∏–¥–∞–ª—ñ—Ç—å –æ–¥–∏–Ω –∑ –Ω–∏—Ö —ñ –∑–Ω–∞–π–¥—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º.

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏

class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None


class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def add(self, value):
        # Write your code here
        new_node = Node(value)
        if not self.head:
            self.head, self.tail = new_node, new_node
            return

        self.tail.next = new_node
        new_node.prev = self.tail
        self.tail = new_node

    def remove(self, value):
        # Write your code here
        if not self.head:
            return False

        cur = self.head
        while cur:
            if cur.value == value:
                if cur.prev is None and cur.next is None:
                    self.head = self.tail = None
                elif cur.prev is None:
                    self.head = cur.next
                    self.head.prev = None
                elif cur.next is None:
                    self.tail = cur.prev
                    self.tail.next = None
                else:
                    cur.prev.next = cur.next
                    cur.next.prev = cur.prev
                return True
            cur = cur.next
        return False

    def find(self, value):
        # Write your code here
        cur = self.head

        while cur is not None:
            if cur.value == value:
                return cur
            cur = cur.next
        return None

    def display(self):
        elements = []
        current = self.head
        while current:
            elements.append(current.value)
            current = current.next
        return elements


# Demonstration of work
dll = DoublyLinkedList()
dll.add(1)
dll.add(2)
dll.add(3)
print("–°–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:", dll.display())
dll.remove(2)
print("–°–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ 2:", dll.display())
result = dll.find(3)
print("–ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞ 3:", result.value if result else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
