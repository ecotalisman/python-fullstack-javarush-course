# Stack ‚Äî Not So Simple

# Write a program that implements a stack and demonstrates its core properties:
# LIFO (Last In, First Out), and the push, pop, and peek operations.

### üá∫üá¶ Ukrainian version:

# –°—Ç–µ–∫ —Ü–µ –Ω–µ —Ç–∞–∫ –≤–∂–µ –π –ø—Ä–æ—Å—Ç–æ

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Ä–µ–∞–ª—ñ–∑—É—î —Å—Ç–µ–∫ —ñ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –π–æ–≥–æ –æ—Å–Ω–æ–≤–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
# LIFO (Last In, First Out), –æ–ø–µ—Ä–∞—Ü—ñ—ó push, pop, —ñ peek.


class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

    # Write your code here
    def push(self, item):
        return self.items.append(item)

    def pop(self):
        if self.is_empty():
            raise IndexError("pop from empty stack")
        return self.items.pop()

    def peek(self):
        if self.is_empty():
            raise IndexError("peek from empty stack")
        return self.items[-1]


# # Demonstration of work stack
stack = Stack()
print("–°—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π:", stack.is_empty())

stack.push(1)
stack.push(2)
stack.push(3)
print("–í–µ—Ä—Ö–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —Å—Ç–µ–∫–∞:", stack.peek())

print("–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞:", stack.pop())
print("–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞:", stack.pop())
print("–í–µ—Ä—Ö–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —Å—Ç–µ–∫–∞:", stack.peek())

print("–°—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π:", stack.is_empty())
print("–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞:", stack.pop())
print("–°—Ç–µ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π:", stack.is_empty())
