# Queue is Simple

# Write a program that implements a queue and demonstrates its core properties:
# FIFO (First In, First Out), and the enqueue, dequeue, and peek operations.
# You may use the built-in list class.

### üá∫üá¶ Ukrainian version:

# –ß–µ—Ä–≥–∞ —Ü–µ –ø—Ä–æ—Å—Ç–æ
# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Ä–µ–∞–ª—ñ–∑—É—î —á–µ—Ä–≥—É —ñ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —ó—ó –æ—Å–Ω–æ–≤–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:
# FIFO (First In, First Out), –æ–ø–µ—Ä–∞—Ü—ñ—ó enqueue, dequeue, —ñ peek.
# –ö–ª–∞—Å list –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞.


class Queue:
    def __init__(self):
        self.queue = []

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

    def enqueue(self, item):
    # Write your code here
        return self.queue.append(item)

    def dequeue(self):
    # Write your code here
        if self.is_empty():
            raise IndexError("dequeue from empty queue")
        return self.queue.pop(0)

    def peek(self):
    # Write your code here
        if self.is_empty():
            raise IndexError("peek from empty queue")
        return self.queue[0]


# Demonstration of work
q = Queue()
q.enqueue(1)
q.enqueue(2)
q.enqueue(3)
q.peek()         # Front item: 1
q.dequeue()      # Dequeued: 1
q.dequeue()      # Dequeued: 2
q.peek()         # Front item: 3
q.dequeue()      # Dequeued: 3
q.dequeue()      # Queue is empty
