# I Love Lists Even More

# Write a program that creates a dynamic array (list-like structure)
# and demonstrates its core operations: append, remove, index access, and element update.
# Do not use the built-in list class.

### üá∫üá¶ Ukrainian version:

# –õ—é–±–ª—é —Å–ø–∏—Å–æ–∫ —â–µ –±—ñ–ª—å—à–µ

# –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –º–∞—Å–∏–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –∫—à—Ç–∞–ª—Ç —Å–ø–∏—Å–∫—É)
# —ñ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –π–æ–≥–æ –æ—Å–Ω–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó: –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –¥–æ—Å—Ç—É–ø –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º —Ç–∞ –∑–º—ñ–Ω—É –µ–ª–µ–º–µ–Ω—Ç–∞.
# –ö–ª–∞—Å list –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞.


class DynamicArray:
    def __init__(self):
        self.array = []

    def add(self, element):
        # Write your code here
        self.array.append(element)

    def remove(self, index):
        # Write your code here
        if len(self.array) == 0:
            raise IndexError("List is empty")
        if index < 0 or index >= len(self.array):
            raise IndexError("Index out of range")
        self.array.pop(index)

    def get(self, index):
        # Write your code here
        if index < 0 or index >= len(self.array):
            raise IndexError("Index out of range")
        return self.array[index]

    def set(self, index, element):
        # Write your code here
        if index < 0 or index >= len(self.array):
            raise IndexError("Index out of range")
        self.array[index] = element

    def __len__(self):
        return len(self.array)

    def __str__(self):
        return str(self.array)


# –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
arr = DynamicArray()
arr.add(1)
arr.add(2)
arr.add(3)
print(arr)  # [1, 2, 3]

arr.remove(2)
print(arr)  # [1, 2]

print(arr.get(1))  # 2

arr.set(1, 5)
print(arr)  # [1, 5]

print(len(arr))  # 2