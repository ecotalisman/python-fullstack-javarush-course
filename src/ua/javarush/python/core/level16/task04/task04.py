# Boundary Values Search

# Write a function that performs the fastest search to find the minimum
# and maximum values in a sorted array of numbers.
# The function should return a tuple with the indices of the minimum
# and maximum elements.

### üá∫üá¶ Ukrainian version:

# –ü–æ—à—É–∫ –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å

# –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î –Ω–∞–π—à–≤–∏–¥—à–∏–π –ø–æ—à—É–∫ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ
# —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–º—É –º–∞—Å–∏–≤—ñ —á–∏—Å–µ–ª.
# –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫–æ—Ä—Ç–µ–∂ –∑ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.

# Write your code here
def find_boundaries(arr):
    n = len(arr)
    if n == 0:
        return (None, None)
    elif arr[0] <= arr[-1]:
        return (0, n - 1)
    return (n - 1, 0)


# Example usage:
arr = [1, 2, 3, 4, 5]
print(find_boundaries(arr))  # –í–∏–≤—ñ–¥: (0, 4)
